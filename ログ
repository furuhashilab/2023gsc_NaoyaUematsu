// スプレッドシートの情報
const SHEET_LOG  = SS.getSheetByName('ログ');
const SHEET_USER = SS.getSheetByName('ユーザー');

// 使用API
const LINE_PROFILE_URL = "https://api.line.me/v2/bot/profile/";

function debugLog(userId, text, replyText) {
  if ('' == text) return; // テキストではない時はログなし
  const userData = findUser(userId); // ユーザーシートにデータがあるか確認
  typeof userData === "undefined" ? addUser(userId) : userUseChat(userId); // ユーザーシートにデータがなければユーザー追加、あれば投稿数だけ追加
  const userName = getUserDisplayName(userId);
  const date = Utilities.formatDate(new Date(), 'Asia/Tokyo', 'yyyy-MM-dd HH:mm:ss'); // 現在の日付を取得
  SHEET_LOG.appendRow([userId, userName, text, replyText, date, "test"]); // ログシートに情報追加
  // 日付順に並び替え
  const numColumn_LOG = SHEET_LOG.getLastColumn(); // 最後列の列番号を取得
  const numRow_LOG    = SHEET_LOG.getLastRow()-1;  // 最後行の行番号を取得
  const dataRange_LOG = SHEET_LOG.getRange(2, 1, numRow_LOG, numColumn_LOG);
  dataRange_LOG.sort([{column: 5, ascending: false}]); // 日付順に並び替え
}

// メンバーとしてユーザー登録されているか検索
function findUser(uid) {
  return getUserData().reduce(function(uuid, row) { return uuid || (row.key === uid && row.value); }, false) || undefined;
}

// ユーザー情報取得
function getUserData() {
  const data = SHEET_USER.getDataRange().getValues();
  return data.map(function(row) { return {key: row[0], value: row[1]}; });
}

function addUser(userId) {
  const userName = getUserDisplayName(userId);
  const userIMG  = getUserDisplayIMG(userId)
  SHEET_USER.appendRow([userId, userName, userIMG, 1]);
}

// ユーザーのプロフィール名取得
function getUserDisplayName(userId) {
  const url = LINE_PROFILE_URL + userId;
  const userProfile = UrlFetchApp.fetch(url,{
    'headers': {
      'Authorization' : 'Bearer ' + LINE_ACCESS_TOKEN,
    },
  })
  return JSON.parse(userProfile).displayName;
}

// ユーザーのプロフィール画像取得 
///////////////////////////////
function getUserDisplayIMG(userId) {
  const url = LINE_PROFILE_URL + userId;
  const userProfile = UrlFetchApp.fetch(url,{
    'headers': {
      'Authorization' :  'Bearer ' + LINE_ACCESS_TOKEN,
    },
  })
  return JSON.parse(userProfile).pictureUrl;
}

// ユーザーの投稿数をプラス１
function userUseChat(userId) {

  // 送信したユーザー先のユーザーを検索
  const textFinder = SHEET_USER.createTextFinder(userId);
  const ranges = textFinder.findAll();

  // ユーザーが存在しない場合エラー
  if(!ranges[0]) SHEET_USER.appendRow([userId, "???", '', 1]);;
  
  // ステータスを出勤中から離席中に変更
  const statusFinder = SHEET_USER.createTextFinder('投稿数');
  const statusRanges = statusFinder.findAll();
  const row    = ranges[0].getRow();
  const column = statusRanges[0].getColumn();

  // 投稿数追加 
  let number = SHEET_USER.getRange(row, column).getValue();
  SHEET_USER.getRange(row, column).setValue(++number);
}
